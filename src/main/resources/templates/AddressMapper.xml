<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.digsol.turnomed.mappers.AddressMapper">
    <resultMap id="BaseResultMap" type="com.digsol.turnomed.model.Address">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="city" jdbcType="VARCHAR" property="city"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
    </resultMap>

    <resultMap id="InfoMapper" type="com.digsol.turnomed.model.Address">
        <result column="address_id" property="id"/>
        <result column="address_name" property="name"/>
        <result column="metro_id" property="metroId"/>
        <result column="info" property="info"/>
        <collection property="doctorTypes" ofType="java.lang.Integer" javaType="List">
            <result column="doctor_type_id"/>
        </collection>
    </resultMap>

    <resultMap id="SearchResultMap" type="com.digsol.turnomed..model.EventsSchedule">
        <id column="es_id" property="id"/>
        <result column="event_date" property="eventDate"/>
        <result column="duration" property="duration"/>
        <result column="max_capacity" property="maxCapacity"/>
        <result column="free_places" property="freePlaces"/>
        <result column="closest_es_id" property="closestEventScheduleId"/>
        <association property="reservation" javaType="com.digsol.turnomed.model.Reservations">
            <result column="reserve_id" property="id"/>
            <result column="reserve_status" property="reserveStatus"/>
            <result column="client_id" property="clientId"/>
            <association property="patient" javaType="com.digsol.turnomed..model.dto.PatientDTO">
                <result column="cl_first_name" property="firstName"/>
                <result column="cl_last_name" property="lastName"/>
                <result column="cl_email" property="email"/>
            </association>
        </association>
        <association property="event" javaType="com.digsol.turnomed.model.Event">
            <result column="event_id" property="id"/>
            <result column="name" property="eventName"/>
            <result column="doctor_type_id" property="doctorTypeId"/>
            <result column="doctor_id" property="doctorId"/>
            <result column="event_info" property="info"/>
            <association property="doctor" javaType="com.digsol.turnomed.model.Doctor">
                <result column="doctor_user_id" property="userId"/>
                <result column="info" property="info"/>
                <result column="phone" property="phone"/>
                <association property="patient" javaType="com.digsol.turnomed.model.dto.PatientDTO">
                    <result column="first_name" property="firstName"/>
                    <result column="last_name" property="lastName"/>
                    <result column="email" property="email"/>
                </association>
            </association>
        </association>
        <association property="locations" javaType="com.digsol.turnomed.model.Locations">
            <result column="location_id" property="id"/>
            <result column="location_name" property="name"/>
        </association>
    </resultMap>

    <sql id="Base_Column_List">
        id, city, name
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from address
        where id = #{id,jdbcType=INTEGER}
    </select>

    <select id="selectAll" resultType="com.digsol.turnomed.model.Address" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/> from address order by name
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from address
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.digsol.turnomed.model.Address">
        insert into address (id, city, name
        )
        values (#{id,jdbcType=INTEGER}, #{city,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}
        )
    </insert>
    <insert id="insertSelective" parameterType="com.digsol.turnomed.model.Address">
        insert into address
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="city != null">
                city,
            </if>
            <if test="name != null">
                name,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="city != null">
                #{city,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.digsol.turnomed.model.Address">
        update address
        <set>
            <if test="city != null">
                city = #{city,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.digsol.turnomed.model.Address">
        update address
        set city = #{city,jdbcType=VARCHAR},
            name = #{name,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="getAddressInformation" resultMap="InfoMapper">
        select
            a.id as address_id,
            a.name as address_name,
            m.id as metro_id,
            m.name as metro_name,
            lst.doctor_type_id,
            a.info::text as info
        from address a
        left join address_doctor_type lst on a.id = lst.address_id
        join metros m on a.metro_id = m.id
        where a.id = #{addressId,jdbcType=INTEGER}
    </select>

    <select id="getAddressInformationByEmail" resultMap="InfoMapper">
        <bind name="pattern" value="'%' + _parameter.getEmail() + '%'" />
        select
            a.id as address_id,
            a.name as address_name,
            m.id as metro_id,
            m.name as metro_name,
            lst.doctor_type_id,
            a.info::text as info
        from address a
        left join address_doctor_type lst on a.id = lst.address_id
        join metros m on a.metro_id = m.id
        where a.info::text LIKE #{pattern}
    </select>

    <select id="detailEventsInfoByAddress" parameterType="com.digsol.turnomed.model.entities.SearchEntity" resultMap="SearchResultMap">
        select * from (
        select distinct
        es.id as es_id,
        es.event_date,
        es.duration,
        (es.max_capacity
        - COALESCE(sum(r.reserve_count) over (partition by es.id), 0)
        + sum(case when COALESCE(r.reserve_status, 0) = 0 then 0 else r.reserve_count end) over (partition by es.id)
        ) as free_places,
        es.event_id,
        l.id as location_id,
        l.name as location_name,
        r.id as reserve_id,
        r.reserve_status,
        r.client_id,
        u1.first_name as cl_first_name,
        u1.middle_name as cl_middle_name,
        u1.last_name as cl_last_name,
        u1.email as cl_email,
        e.id as event_id,
        e.name,
        e.doctor_type_id,
        e.doctor_id,
        e.info event_info,
        t.user_id as doctor_user_id,
        t.info::text,
        t.phone,
        u.id as user_id,
        u.first_name,
        u.middle_name,
        u.last_name,
        u.email,
        a.id as address_id,
        a.city,
        a.name as address_name
        from events_schedule es
        join locations l on es.location_id = l.id
        join events e on es.event_id = e.id
        left join doctor t on e.doctor_id = t.user_id
        left join patient u on t.patient_id = u.id
        join doctor_types st on e.doctor_type_id = st.id
        left join reservations r on r.event_schedule_id = es.id
        left join patient u1 on r.client_id = u1.id
        join address a on sa.address_id = a.id
        <where>
            <if test="startDate != null and endDate != null">
              es.event_date between #{startDate} and #{endDate}
            </if>
            <if test="addressId != null">
              and a.id = #{addressId}
            </if>
            <if test="hasReservation !=null">
              and r.id is not null
            </if>
        </where>
        ) a
    </select>

</mapper>